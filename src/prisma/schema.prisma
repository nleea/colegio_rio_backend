generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model asistencia {
  id                Int       @id @default(autoincrement())
  fechaingreso      DateTime? @db.Date
  estudiante_id     Int       @unique(map: "asistencia_estudiante_id_unique")
  entrada_id        Int
  motivo            String?   @db.VarChar(100)
  respuesta_llamada String?   @db.VarChar(100)
  incapacidad       String?   @db.VarChar(150)
  observacion       String?   @db.VarChar(100)
  diagnostico       String?   @db.VarChar(100)
  jornada           String?   @db.VarChar(2)
  retardo           String?   @db.VarChar(2)
  estado_id         Int
  created_at        DateTime  @default(now()) @db.Timestamp(0)
  created_by        Int       @default(1)
  updated_at        DateTime? @db.Timestamp(0)
  updated_by        Int?
  deleted_at        DateTime? @db.Timestamp(0)
  deleted_by        Int?

  @@index([entrada_id], map: "asistencia_entrada_id_foreign")
  @@index([estado_id], map: "asistencia_estado_id_foreign")
  @@index([estudiante_id], map: "asistencia_estudiante_id_foreign")
}

model coareas {
  id         Int          @id @default(autoincrement())
  nombre     String       @db.VarChar(255)
  grado_id   Int
  sede_id    Int
  codigo     String       @db.VarChar(255)
  created_at DateTime     @default(now()) @db.Timestamp(0)
  created_by Int
  updated_at DateTime?    @db.Timestamp(0)
  updated_by Int?
  deleted_at DateTime?    @db.Timestamp(0)
  deleted_by Int?
  estado_id  Int?
  cogrados   cogrados     @relation(fields: [grado_id], references: [id], onDelete: Cascade, map: "coareas_grado_id_foreign_key")
  cosedes    cosedes      @relation(fields: [sede_id], references: [id], onDelete: Cascade, map: "coareas_sede_id_foreign_key")
  comaterias comaterias[]

  @@index([grado_id], map: "coareas_grado_id_foreign")
  @@index([sede_id], map: "coareas_sede_id_foreign")
}

model cocursos {
  id             Int             @id @default(autoincrement())
  codigo         String          @db.VarChar(50)
  nombre         String          @db.VarChar(50)
  grado_id       Int
  sede_id        Int
  director_id    Int?
  created_at     DateTime        @default(now()) @db.Timestamp(0)
  created_by     Int
  updated_at     DateTime?       @db.Timestamp(0)
  updated_by     Int?
  deleted_at     DateTime?       @db.Timestamp(0)
  deleted_by     Int?
  cofuncionarios cofuncionarios? @relation(fields: [director_id], references: [id], onDelete: Cascade, map: "cocursos_director_id_foreign_key")
  cogrados       cogrados        @relation(fields: [grado_id], references: [id], onDelete: Cascade, map: "cocursos_grado_id_foreign_key")
  cosedes        cosedes         @relation(fields: [sede_id], references: [id], onDelete: Cascade, map: "cocursos_sede_id_foreign_key")

  @@index([director_id], map: "cocursos_director_id_foreign")
  @@index([grado_id], map: "cocursos_grado_id_foreign")
  @@index([sede_id], map: "cocursos_sede_id_foreign")
}

model codiasnohabiles {
  id         Int       @id @default(autoincrement())
  tipodia_id Int
  dia_nh     DateTime  @db.Date
  comentario String?
  created_at DateTime? @default(now()) @db.Timestamp(0)
  created_by Int
  updated_at DateTime? @db.Timestamp(0)
  updated_by Int?
  deleted_at DateTime? @db.Timestamp(0)
  deleted_by Int?

  @@index([tipodia_id], map: "codiasnohabiles_tipodia_id_foreign")
}

model coeventos {
  id            Int       @id @default(autoincrement())
  tipoevento_id Int
  fechainicial  DateTime? @db.Date
  fechafin      DateTime? @db.Date
  foto          String?
  descripcion   String?
  nombre        String?
  created_at    DateTime? @default(now()) @db.Timestamp(0)
  created_by    Int?      @default(1)
  updated_at    DateTime? @db.Timestamp(0)
  updated_by    Int?
  deleted_at    DateTime? @db.Timestamp(0)
  deleted_by    Int?
  maestras      maestras  @relation(fields: [tipoevento_id], references: [id], onDelete: NoAction, map: "eventos_tipoevento_id_foreign_key")

  @@index([tipoevento_id], map: "eventos_tipoevento_id_foreign")
}

model cofuncionarios {
  id                                                Int        @id @default(autoincrement())
  fechaingreso                                      DateTime   @db.Date
  tarjetaprofesional                                String     @db.VarChar(150)
  persona_id                                        Int        @unique(map: "cofuncionarios_persona_id_unique")
  cargo_id                                          Int?
  sede_id                                           Int?
  especialidad_id                                   Int?
  dependencia_id                                    Int?
  tipofuncionario_id                                Int?
  estado_id                                         Int
  created_at                                        DateTime   @default(now()) @db.Timestamp(0)
  created_by                                        Int
  updated_at                                        DateTime?  @db.Timestamp(0)
  updated_by                                        Int?
  deleted_at                                        DateTime?  @db.Timestamp(0)
  deleted_by                                        Int?
  cocursos                                          cocursos[]
  maestras_cofuncionarios_cargo_idTomaestras        maestras?  @relation("cofuncionarios_cargo_idTomaestras", fields: [cargo_id], references: [id], onDelete: Cascade, map: "cofuncionarios_cargo_id_foreign_key")
  maestras_cofuncionarios_dependencia_idTomaestras  maestras?  @relation("cofuncionarios_dependencia_idTomaestras", fields: [dependencia_id], references: [id], onDelete: Cascade, map: "cofuncionarios_dependencia_id_foreign_key")
  maestras_cofuncionarios_especialidad_idTomaestras maestras?  @relation("cofuncionarios_especialidad_idTomaestras", fields: [especialidad_id], references: [id], onDelete: Cascade, map: "cofuncionarios_especialidad_id_foreign_key")
  cosedes                                           cosedes?   @relation(fields: [sede_id], references: [id], onDelete: Cascade, map: "cofuncionarios_sede_id_foreign_key")
  cogrados                                          cogrados[]

  @@index([cargo_id], map: "cofuncionarios_cargo_id_foreign")
  @@index([dependencia_id], map: "cofuncionarios_dependencia_id_foreign")
  @@index([especialidad_id], map: "cofuncionarios_especialidad_id_foreign")
  @@index([estado_id], map: "cofuncionarios_estado_id_foreign")
  @@index([sede_id], map: "cofuncionarios_sede_id_foreign")
  @@index([tipofuncionario_id], map: "cofuncionarios_tipofuncionario_id_foreign")
}

model cogrados {
  id                  Int                   @id @default(autoincrement())
  nombre              String                @db.VarChar(255)
  sede_id             Int
  director_id         Int?
  created_at          DateTime              @default(now()) @db.Timestamp(0)
  created_by          Int
  updated_at          DateTime?             @db.Timestamp(0)
  updated_by          Int?
  deleted_at          DateTime?             @db.Timestamp(0)
  deleted_by          Int?
  coareas             coareas[]
  cocursos            cocursos[]
  cofuncionarios      cofuncionarios?       @relation(fields: [director_id], references: [id], onDelete: Cascade, map: "cogrados_director_id_foreign_key")
  cosedes             cosedes               @relation(fields: [sede_id], references: [id], onDelete: Cascade, map: "cogrados_sede_id_foreign_key")
  cogradosestudiantes cogradosestudiantes[]

  @@index([director_id], map: "cogrados_director_id_foreign")
  @@index([sede_id], map: "cogrados_sede_id_foreign")
}

model cogradosestudiantes {
  id            Int         @id @default(autoincrement())
  estudiante_id Int
  curso_id      Int
  sede_id       Int
  a_o           String      @map("a√±o") @db.VarChar(50)
  created_at    DateTime    @default(now()) @db.Timestamp(0)
  created_by    Int
  updated_at    DateTime?   @db.Timestamp(0)
  updated_by    Int?
  deleted_at    DateTime?   @db.Timestamp(0)
  deleted_by    Int?
  estudiantes   estudiantes @relation(fields: [estudiante_id], references: [id], onDelete: Cascade, map: "cogradosEstudiantes_estudiante_id_foreign_key")
  cogrados      cogrados    @relation(fields: [curso_id], references: [id], onDelete: Cascade, map: "cogradosEstudiantes_grado_id_foreign")
  cosedes       cosedes     @relation(fields: [sede_id], references: [id], onDelete: Cascade, map: "cogradosEstudiantes_sede_id_foreign_key")

  @@index([curso_id], map: "cogradosEstudiantes_curso_id_foreign")
  @@index([estudiante_id], map: "cogradosEstudiantes_estudiante_id_foreign")
  @@index([sede_id], map: "cogradosEstudiantes_sede_id_foreign")
}

model colegios {
  id                  Int       @id @default(autoincrement())
  nombre              String    @db.VarChar(255)
  codigoprestador     String?   @db.VarChar(50)
  tipoi_id            Int?
  identificacion      String?   @db.VarChar(80)
  telefono            String?   @db.VarChar(80)
  direccion           String    @db.VarChar(80)
  nom_representante   String?   @db.VarChar(80)
  email_representante String?   @db.VarChar(80)
  tel_representante   String?   @db.VarChar(80)
  logo                String?
  created_at          DateTime  @default(now()) @db.Timestamp(0)
  created_by          Int
  updated_at          DateTime? @db.Timestamp(0)
  updated_by          Int?
  deleted_at          DateTime? @db.Timestamp(0)
  deleted_by          Int?

  @@index([tipoi_id], map: "colegios_tipoi_id_foreign")
}

model comaterias {
  id         Int       @id @default(autoincrement())
  nombre     String    @db.VarChar(255)
  sede_id    Int
  area_id    Int
  codigo     String    @db.VarChar(255)
  created_at DateTime  @default(now()) @db.Timestamp(0)
  created_by Int
  updated_at DateTime? @db.Timestamp(0)
  updated_by Int?
  deleted_at DateTime? @db.Timestamp(0)
  deleted_by Int?
  estado_id  Int?
  coareas    coareas   @relation(fields: [area_id], references: [id], onDelete: Cascade, map: "comaterias_area_id_foreign_key")
  cosedes    cosedes   @relation(fields: [sede_id], references: [id], onDelete: Cascade, map: "comaterias_sede_id_foreign_key")

  @@index([area_id], map: "comaterias_area_id_foreign")
  @@index([sede_id], map: "comaterias_sede_id_foreign")
}

model corolesperfiles {
  id                                           Int       @id @default(autoincrement())
  perfil_id                                    Int
  rol_id                                       Int
  estado                                       Boolean   @default(true)
  observacion                                  String?   @db.VarChar(255)
  created_at                                   DateTime  @default(now()) @db.Timestamp(0)
  created_by                                   Int       @default(2)
  updated_at                                   DateTime? @db.Timestamp(0)
  updated_by                                   Int?
  deleted_at                                   DateTime? @db.Timestamp(0)
  deleted_by                                   Int?
  maestras_corolesperfiles_perfil_idTomaestras maestras  @relation("corolesperfiles_perfil_idTomaestras", fields: [perfil_id], references: [id], onDelete: Cascade, map: "corolesperfiles_perfil_id_foreign_key")
  maestras_corolesperfiles_rol_idTomaestras    maestras  @relation("corolesperfiles_rol_idTomaestras", fields: [rol_id], references: [id], onDelete: Cascade, map: "corolesperfiles_rol_id_foreign_key")

  @@index([perfil_id], map: "corolesperfiles_perfil_id_foreign")
  @@index([rol_id], map: "corolesperfiles_rol_id_foreign")
}

model cosedes {
  id                  Int                   @id @default(autoincrement())
  nombre              String                @db.VarChar(255)
  direccion           String?               @db.VarChar(80)
  email               String?               @db.VarChar(80)
  telefono            String?               @db.VarChar(80)
  prestador           String?               @db.VarChar(80)
  colegios_id         Int
  created_at          DateTime              @default(now()) @db.Timestamp(0)
  created_by          Int
  updated_at          DateTime?             @db.Timestamp(0)
  updated_by          Int?
  deleted_at          DateTime?             @db.Timestamp(0)
  deleted_by          Int?
  coareas             coareas[]
  cocursos            cocursos[]
  cofuncionarios      cofuncionarios[]
  cogrados            cogrados[]
  cogradosestudiantes cogradosestudiantes[]
  comaterias          comaterias[]
  estudiantes         estudiantes[]

  @@index([colegios_id], map: "cosedes_empresa_id_foreign")
}

model estudiantes {
  id                  Int                   @id @default(autoincrement())
  fechaingreso        DateTime?             @db.Date
  fechasalida         DateTime?             @db.Date
  persona_id          Int                   @unique(map: "estudiantes_persona_id_unique")
  sede_id             Int?
  created_at          DateTime              @default(now()) @db.Timestamp(0)
  created_by          Int                   @default(1)
  updated_at          DateTime?             @db.Timestamp(0)
  updated_by          Int?
  deleted_at          DateTime?             @db.Timestamp(0)
  deleted_by          Int?
  cogradosestudiantes cogradosestudiantes[]
  personas            personas              @relation(fields: [persona_id], references: [id], onDelete: NoAction, map: "estudiantes_persona_id_foreign_key")
  cosedes             cosedes?              @relation(fields: [sede_id], references: [id], onDelete: Cascade, map: "estudiantes_sede_id_foreign_key")

  @@index([persona_id], map: "estudiantes_persona_id_foreign")
  @@index([sede_id], map: "estudiantes_sede_id_foreign")
}

model maestras {
  id                                                      Int               @id @default(autoincrement())
  codigo                                                  String?           @db.VarChar(255)
  nombre                                                  String            @db.VarChar(355)
  padre                                                   Int?
  jerarquia                                               Int?
  orden                                                   String?           @db.VarChar(3)
  visible                                                 Boolean?          @default(true)
  observacion                                             String?
  created_at                                              DateTime          @default(now()) @db.Timestamp(0)
  created_by                                              Int               @default(2)
  updated_at                                              DateTime?         @db.Timestamp(0)
  updated_by                                              Int?
  deleted_at                                              DateTime?         @db.Timestamp(0)
  deleted_by                                              Int?
  coeventos                                               coeventos[]
  cofuncionarios_cofuncionarios_cargo_idTomaestras        cofuncionarios[]  @relation("cofuncionarios_cargo_idTomaestras")
  cofuncionarios_cofuncionarios_dependencia_idTomaestras  cofuncionarios[]  @relation("cofuncionarios_dependencia_idTomaestras")
  cofuncionarios_cofuncionarios_especialidad_idTomaestras cofuncionarios[]  @relation("cofuncionarios_especialidad_idTomaestras")
  corolesperfiles_corolesperfiles_perfil_idTomaestras     corolesperfiles[] @relation("corolesperfiles_perfil_idTomaestras")
  corolesperfiles_corolesperfiles_rol_idTomaestras        corolesperfiles[] @relation("corolesperfiles_rol_idTomaestras")
  maestras_maestras_jerarquiaTomaestras                   maestras?         @relation("maestras_jerarquiaTomaestras", fields: [jerarquia], references: [id], onDelete: Cascade, map: "maestras_jerarquia_foreign_key")
  other_maestras_maestras_jerarquiaTomaestras             maestras[]        @relation("maestras_jerarquiaTomaestras")
  maestras_maestras_padreTomaestras                       maestras?         @relation("maestras_padreTomaestras", fields: [padre], references: [id], onDelete: Cascade, map: "maestras_padre_foreign_key")
  other_maestras_maestras_padreTomaestras                 maestras[]        @relation("maestras_padreTomaestras")
  users                                                   users[]

  @@index([jerarquia], map: "maestras_jerarquia_foreign")
  @@index([padre], map: "maestras_padre_foreign")
}

model modulos {
  id               Int                @id @default(autoincrement())
  name             String?
  path             String?
  icon             String?
  children         String?
  order            Int?
  created_at       DateTime?          @default(now()) @db.Timestamp(0)
  created_by       Int?
  updated_at       DateTime?          @db.Timestamp(0)
  updated_by       Int?
  deleted_at       DateTime?          @db.Timestamp(0)
  deleted_by       Int?
  modulos_has_role modulos_has_role[]
}

model modulos_has_role {
  id         Int       @id @default(autoincrement())
  modulo_id  Int
  role_id    Int
  created_at DateTime? @default(now()) @db.Timestamp(0)
  created_by Int?
  updated_at DateTime? @db.Timestamp(0)
  updated_by Int?
  deleted_at DateTime? @db.Timestamp(0)
  deleted_by Int?
  modulos    modulos   @relation(fields: [modulo_id], references: [id], onDelete: Cascade, map: "modulos_has_role_modulo_id_foreign_key")
  roles      roles     @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "modulos_has_role_role_id_foreign_key")

  @@index([modulo_id], map: "modulos_has_role_modulo_id_foreign")
  @@index([role_id], map: "modulos_has_role_role_id_foreign")
}

model penotas {
  id            Int       @id @default(autoincrement())
  estudiante_id Int
  profesor_id   Int
  materia_id    Int
  grado_id      Int
  curso_id      Int
  nota          Float
  a_o           String    @map("a√±o") @db.VarChar(50)
  corte_id      Int
  created_at    DateTime  @default(now()) @db.Timestamp(0)
  created_by    Int       @default(1)
  updated_at    DateTime? @db.Timestamp(0)
  updated_by    Int?
  deleted_at    DateTime? @db.Timestamp(0)
  deleted_by    Int?

  @@index([corte_id], map: "penotas_corte_id_foreign")
  @@index([curso_id], map: "penotas_curso_id_foreign")
  @@index([estudiante_id], map: "penotas_estudiante_id_foreign")
  @@index([grado_id], map: "penotas_grado_id_foreign")
  @@index([materia_id], map: "penotas_materia_id_foreign")
  @@index([profesor_id], map: "penotas_profesor_id_foreign")
}

model permissions {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique(map: "permissions_name_unique")
  categoria            String
  created_by           Int?
  created_at           DateTime               @default(now()) @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  updated_by           Int?
  deleted_at           DateTime?              @db.Timestamp(0)
  deleted_by           Int?
  role_has_permissions role_has_permissions[]
}

model personas {
  id                    Int          @id @default(autoincrement())
  identificacion        String       @unique(map: "personas_identificacion_unique") @db.VarChar(50)
  lugarexpedicion       String?      @db.VarChar(50)
  fechaexpedicion       DateTime?    @db.Date
  direccion             String?      @db.VarChar(150)
  telefono              String?      @db.VarChar(50)
  telefonomovil         String       @db.VarChar(10)
  telefonowhatsapp      String?      @db.VarChar(50)
  email                 String       @db.VarChar(50)
  sendemail             Boolean?     @default(false)
  fechanacimiento       DateTime     @db.Date
  nombre                String       @db.VarChar(50)
  segundonombre         String?      @db.VarChar(50)
  apellido              String       @db.VarChar(50)
  segundoapellido       String?      @db.VarChar(50)
  foto                  String?
  pais_id               Int?
  departamento_id       Int?
  ciudad_id             Int?
  zona_id               Int?
  barrio                String?      @db.VarChar(100)
  tipoidentificacion_id Int?
  sexo_id               Int
  ocupacion_id          Int?
  observaciones         String?
  created_at            DateTime     @default(now()) @db.Timestamp(0)
  created_by            Int          @default(1)
  updated_at            DateTime?    @db.Timestamp(0)
  updated_by            Int?
  deleted_at            DateTime?    @db.Timestamp(0)
  deleted_by            Int?
  estudiantes           estudiantes?
  users                 users?
}

model role_has_permissions {
  id            Int         @default(autoincrement())
  permission_id Int
  role_id       Int
  created_at    DateTime    @default(now()) @db.Timestamp(0)
  created_by    Int?
  updated_at    DateTime?   @db.Timestamp(0)
  updated_by    Int?
  deleted_at    DateTime?   @db.Timestamp(0)
  deleted_by    Int?
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_permission_id_foreign_key")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "role_has_permissions_role_id_foreign_key")

  @@id([id, permission_id, role_id])
  @@index([permission_id], map: "role_has_permissions_permission_id_foreign")
  @@index([role_id], map: "role_has_permissions_role_id_foreign")
}

model roles {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique(map: "roles_name_unique")
  categoria            String
  created_at           DateTime               @default(now()) @db.Timestamp(0)
  created_by           Int?
  updated_at           DateTime?              @db.Timestamp(0)
  updated_by           Int?
  deleted_at           DateTime?              @db.Timestamp(0)
  deleted_by           Int?
  modulos_has_role     modulos_has_role[]
  role_has_permissions role_has_permissions[]
  users                users[]
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model users {
  id                        Int       @id @default(autoincrement())
  username                  String    @unique(map: "users_username_unique") @db.VarChar(255)
  password                  String    @db.VarChar(255)
  two_factor_secret         String?
  two_factor_recovery_codes String?
  telefonomovil             String?   @unique(map: "users_telefonomovil_unique") @db.VarChar(50)
  email                     String?   @db.VarChar(50)
  email_verified_at         DateTime? @db.Timestamp(0)
  codigo_sms                String?   @db.VarChar(255)
  apitoken                  String?   @db.VarChar(255)
  remember_token            String?   @db.VarChar(100)
  current_team_id           Int?
  estado_id                 Int?
  role_id                   Int?
  persona_id                Int       @unique(map: "users_persona_id_unique")
  created_at                DateTime  @default(now()) @db.Timestamp(0)
  created_by                Int       @default(1)
  updated_at                DateTime? @db.Timestamp(0)
  updated_by                Int?
  deleted_at                DateTime? @db.Timestamp(0)
  deleted_by                Int?
  maestras                  maestras? @relation(fields: [estado_id], references: [id], onDelete: Cascade, map: "users_estado_id_foreign_key")
  personas                  personas  @relation(fields: [persona_id], references: [id], onDelete: Cascade, map: "user_persona_id_foreign")
  roles                     roles?    @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "users_role_id_foreign_key")

  @@index([estado_id], map: "users_estado_id_foreign")
  @@index([role_id], map: "users_role_id_foreign")
  @@index([persona_id], map: "users_persona_id_foreign")
}
